// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: oauth.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const deleteOAuthAccount = `-- name: DeleteOAuthAccount :exec
DELETE FROM oauth_accounts
WHERE provider = $1 AND provider_user_id = $2
`

type DeleteOAuthAccountParams struct {
	Provider       string
	ProviderUserID string
}

func (q *Queries) DeleteOAuthAccount(ctx context.Context, arg DeleteOAuthAccountParams) error {
	_, err := q.db.ExecContext(ctx, deleteOAuthAccount, arg.Provider, arg.ProviderUserID)
	return err
}

const getOAuthAccount = `-- name: GetOAuthAccount :one
SELECT id, user_id, provider, provider_user_id, access_token, refresh_token, expires_at, created_at FROM oauth_accounts
WHERE provider = $1 AND provider_user_id = $2
LIMIT 1
`

type GetOAuthAccountParams struct {
	Provider       string
	ProviderUserID string
}

func (q *Queries) GetOAuthAccount(ctx context.Context, arg GetOAuthAccountParams) (OauthAccount, error) {
	row := q.db.QueryRowContext(ctx, getOAuthAccount, arg.Provider, arg.ProviderUserID)
	var i OauthAccount
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Provider,
		&i.ProviderUserID,
		&i.AccessToken,
		&i.RefreshToken,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const getOAuthAccountsByUser = `-- name: GetOAuthAccountsByUser :many
SELECT id, user_id, provider, provider_user_id, access_token, refresh_token, expires_at, created_at FROM oauth_accounts
WHERE user_id = $1
`

func (q *Queries) GetOAuthAccountsByUser(ctx context.Context, userID uuid.UUID) ([]OauthAccount, error) {
	rows, err := q.db.QueryContext(ctx, getOAuthAccountsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OauthAccount
	for rows.Next() {
		var i OauthAccount
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Provider,
			&i.ProviderUserID,
			&i.AccessToken,
			&i.RefreshToken,
			&i.ExpiresAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const linkOAuthAccount = `-- name: LinkOAuthAccount :one
INSERT INTO oauth_accounts (user_id, provider, provider_user_id, access_token, refresh_token, expires_at)
VALUES ($1, $2, $3, $4, $5, $6)
  ON CONFLICT (provider, provider_user_id) DO UPDATE
  SET access_token = EXCLUDED.access_token,
  refresh_token = EXCLUDED.refresh_token,
  expires_at = EXCLUDED.expires_at
RETURNING id, user_id, provider, provider_user_id, access_token, refresh_token, expires_at, created_at
`

type LinkOAuthAccountParams struct {
	UserID         uuid.UUID
	Provider       string
	ProviderUserID string
	AccessToken    sql.NullString
	RefreshToken   sql.NullString
	ExpiresAt      sql.NullTime
}

func (q *Queries) LinkOAuthAccount(ctx context.Context, arg LinkOAuthAccountParams) (OauthAccount, error) {
	row := q.db.QueryRowContext(ctx, linkOAuthAccount,
		arg.UserID,
		arg.Provider,
		arg.ProviderUserID,
		arg.AccessToken,
		arg.RefreshToken,
		arg.ExpiresAt,
	)
	var i OauthAccount
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Provider,
		&i.ProviderUserID,
		&i.AccessToken,
		&i.RefreshToken,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}
