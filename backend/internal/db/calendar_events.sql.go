// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: calendar_events.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createCalendarEvent = `-- name: CreateCalendarEvent :one
INSERT INTO calendar_events (user_id, title, description, start_time, end_time)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, user_id, title, description, start_time, end_time, created_at, updated_at
`

type CreateCalendarEventParams struct {
	UserID      uuid.UUID
	Title       string
	Description sql.NullString
	StartTime   time.Time
	EndTime     sql.NullTime
}

func (q *Queries) CreateCalendarEvent(ctx context.Context, arg CreateCalendarEventParams) (CalendarEvent, error) {
	row := q.db.QueryRowContext(ctx, createCalendarEvent,
		arg.UserID,
		arg.Title,
		arg.Description,
		arg.StartTime,
		arg.EndTime,
	)
	var i CalendarEvent
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Description,
		&i.StartTime,
		&i.EndTime,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteCalendarEvent = `-- name: DeleteCalendarEvent :exec
DELETE FROM calendar_events
WHERE id = $1
`

func (q *Queries) DeleteCalendarEvent(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteCalendarEvent, id)
	return err
}

const getAllCalendarEvents = `-- name: GetAllCalendarEvents :many
SELECT id, user_id, title, description, start_time, end_time, created_at, updated_at
FROM calendar_events
ORDER BY start_time ASC
`

func (q *Queries) GetAllCalendarEvents(ctx context.Context) ([]CalendarEvent, error) {
	rows, err := q.db.QueryContext(ctx, getAllCalendarEvents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CalendarEvent
	for rows.Next() {
		var i CalendarEvent
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Description,
			&i.StartTime,
			&i.EndTime,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCalendarEventByID = `-- name: GetCalendarEventByID :one
SELECT id, user_id, title, description, start_time, end_time, created_at, updated_at FROM calendar_events
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetCalendarEventByID(ctx context.Context, id uuid.UUID) (CalendarEvent, error) {
	row := q.db.QueryRowContext(ctx, getCalendarEventByID, id)
	var i CalendarEvent
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Description,
		&i.StartTime,
		&i.EndTime,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getEventsByUser = `-- name: GetEventsByUser :many
SELECT id, user_id, title, description, start_time, end_time, created_at, updated_at FROM calendar_events
WHERE user_id = $1
ORDER BY start_time ASC
`

func (q *Queries) GetEventsByUser(ctx context.Context, userID uuid.UUID) ([]CalendarEvent, error) {
	rows, err := q.db.QueryContext(ctx, getEventsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CalendarEvent
	for rows.Next() {
		var i CalendarEvent
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Description,
			&i.StartTime,
			&i.EndTime,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCalendarEvent = `-- name: UpdateCalendarEvent :one
UPDATE calendar_events
SET title = $2, description = $3, start_time = $4, end_time = $5, updated_at = NOW()
WHERE id = $1
RETURNING id, user_id, title, description, start_time, end_time, created_at, updated_at
`

type UpdateCalendarEventParams struct {
	ID          uuid.UUID
	Title       string
	Description sql.NullString
	StartTime   time.Time
	EndTime     sql.NullTime
}

func (q *Queries) UpdateCalendarEvent(ctx context.Context, arg UpdateCalendarEventParams) (CalendarEvent, error) {
	row := q.db.QueryRowContext(ctx, updateCalendarEvent,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.StartTime,
		arg.EndTime,
	)
	var i CalendarEvent
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Description,
		&i.StartTime,
		&i.EndTime,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
