// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package db

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
	"github.com/sqlc-dev/pqtype"
)

type MissionTypeEnum string

const (
	MissionTypeEnumRecon  MissionTypeEnum = "recon"
	MissionTypeEnumRescue MissionTypeEnum = "rescue"
	MissionTypeEnumPatrol MissionTypeEnum = "patrol"
)

func (e *MissionTypeEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = MissionTypeEnum(s)
	case string:
		*e = MissionTypeEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for MissionTypeEnum: %T", src)
	}
	return nil
}

type NullMissionTypeEnum struct {
	MissionTypeEnum MissionTypeEnum
	Valid           bool // Valid is true if MissionTypeEnum is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullMissionTypeEnum) Scan(value interface{}) error {
	if value == nil {
		ns.MissionTypeEnum, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.MissionTypeEnum.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullMissionTypeEnum) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.MissionTypeEnum), nil
}

type NotificationTypeEnum string

const (
	NotificationTypeEnumMissionUpdate   NotificationTypeEnum = "mission_update"
	NotificationTypeEnumHighThreatAlert NotificationTypeEnum = "high_threat_alert"
)

func (e *NotificationTypeEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = NotificationTypeEnum(s)
	case string:
		*e = NotificationTypeEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for NotificationTypeEnum: %T", src)
	}
	return nil
}

type NullNotificationTypeEnum struct {
	NotificationTypeEnum NotificationTypeEnum
	Valid                bool // Valid is true if NotificationTypeEnum is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullNotificationTypeEnum) Scan(value interface{}) error {
	if value == nil {
		ns.NotificationTypeEnum, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.NotificationTypeEnum.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullNotificationTypeEnum) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.NotificationTypeEnum), nil
}

type ThreatLevelEnum string

const (
	ThreatLevelEnumLow      ThreatLevelEnum = "low"
	ThreatLevelEnumMedium   ThreatLevelEnum = "medium"
	ThreatLevelEnumHigh     ThreatLevelEnum = "high"
	ThreatLevelEnumCritical ThreatLevelEnum = "critical"
)

func (e *ThreatLevelEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ThreatLevelEnum(s)
	case string:
		*e = ThreatLevelEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for ThreatLevelEnum: %T", src)
	}
	return nil
}

type NullThreatLevelEnum struct {
	ThreatLevelEnum ThreatLevelEnum
	Valid           bool // Valid is true if ThreatLevelEnum is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullThreatLevelEnum) Scan(value interface{}) error {
	if value == nil {
		ns.ThreatLevelEnum, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ThreatLevelEnum.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullThreatLevelEnum) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ThreatLevelEnum), nil
}

type CalendarEvent struct {
	ID          uuid.UUID
	UserID      uuid.UUID
	Title       string
	Description sql.NullString
	StartTime   time.Time
	EndTime     sql.NullTime
	CreatedAt   time.Time
	UpdatedAt   time.Time
}

type Chunk struct {
	ID         uuid.UUID
	DocumentID uuid.NullUUID
	ChunkIndex sql.NullInt32
	Content    sql.NullString
	Embedding  interface{}
	CreatedAt  sql.NullTime
}

type Document struct {
	ID           uuid.UUID
	Title        sql.NullString
	Filename     sql.NullString
	MimeType     sql.NullString
	CreatedAt    sql.NullTime
	DocEmbedding interface{}
}

type Mission struct {
	ID          uuid.UUID
	UserID      uuid.UUID
	Title       string
	Description sql.NullString
	MissionType NullMissionTypeEnum
	Latitude    sql.NullFloat64
	Longitude   sql.NullFloat64
	StartTime   time.Time
	EndTime     sql.NullTime
	ThreatLevel NullThreatLevelEnum
	Success     sql.NullBool
	CreatedAt   time.Time
	UpdatedAt   time.Time
}

type MissionAttachment struct {
	ID        uuid.UUID
	MissionID uuid.UUID
	FileUrl   string
	FileType  sql.NullString
	CreatedAt time.Time
}

type MissionLog struct {
	ID        uuid.UUID
	MissionID uuid.UUID
	LogDate   time.Time
	Note      string
	CreatedAt time.Time
}

type Notification struct {
	ID        uuid.UUID
	UserID    uuid.UUID
	MissionID uuid.NullUUID
	Type      NotificationTypeEnum
	Message   string
	IsRead    bool
	CreatedAt time.Time
}

type OauthAccount struct {
	ID             uuid.UUID
	UserID         uuid.UUID
	Provider       string
	ProviderUserID string
	AccessToken    sql.NullString
	RefreshToken   sql.NullString
	ExpiresAt      sql.NullTime
	CreatedAt      time.Time
}

type Spell struct {
	Pageid              int32
	Title               string
	Url                 string
	Summary             sql.NullString
	UsedByDoctorStrange bool
	LastFetchedAt       time.Time
	PageRevID           sql.NullInt64
	LastRevTs           sql.NullTime
	ImageUrl            sql.NullString
	Categories          []string
	Realities           []string
	FirstAppearance     sql.NullString
	Aliases             []string
	Infobox             pqtype.NullRawMessage
	Sections            pqtype.NullRawMessage
	Outlinks            pqtype.NullRawMessage
	Embedding           interface{}
	Origin              sql.NullString
	PowerClass          sql.NullString
	AccessLevel         sql.NullInt16
	RestrictedReason    sql.NullString
	AlertTriggeredAt    sql.NullTime
	CreatedAt           sql.NullTime
	UpdatedAt           sql.NullTime
}

type User struct {
	ID           uuid.UUID
	Email        string
	PasswordHash sql.NullString
	Name         sql.NullString
	AvatarUrl    sql.NullString
	CreatedAt    time.Time
	UpdatedAt    time.Time
}

type UserGameStat struct {
	ID         uuid.UUID
	BestTime   string
	BestPoints string
	CreatedAt  time.Time
	UpdatedAt  time.Time
	UserID     uuid.NullUUID
}
