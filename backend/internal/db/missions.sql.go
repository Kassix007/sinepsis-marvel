// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: missions.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createMission = `-- name: CreateMission :one
INSERT INTO missions (user_id, title, description, mission_type, latitude, longitude, start_time, end_time, threat_level, success)
VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10)
RETURNING id, user_id, title, description, mission_type, latitude, longitude, start_time, end_time, threat_level, success, created_at, updated_at
`

type CreateMissionParams struct {
	UserID      uuid.UUID
	Title       string
	Description sql.NullString
	MissionType NullMissionTypeEnum
	Latitude    sql.NullFloat64
	Longitude   sql.NullFloat64
	StartTime   time.Time
	EndTime     sql.NullTime
	ThreatLevel NullThreatLevelEnum
	Success     sql.NullBool
}

func (q *Queries) CreateMission(ctx context.Context, arg CreateMissionParams) (Mission, error) {
	row := q.db.QueryRowContext(ctx, createMission,
		arg.UserID,
		arg.Title,
		arg.Description,
		arg.MissionType,
		arg.Latitude,
		arg.Longitude,
		arg.StartTime,
		arg.EndTime,
		arg.ThreatLevel,
		arg.Success,
	)
	var i Mission
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Description,
		&i.MissionType,
		&i.Latitude,
		&i.Longitude,
		&i.StartTime,
		&i.EndTime,
		&i.ThreatLevel,
		&i.Success,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteMission = `-- name: DeleteMission :exec
DELETE FROM missions
WHERE id = $1
`

func (q *Queries) DeleteMission(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteMission, id)
	return err
}

const getMissionByID = `-- name: GetMissionByID :one
SELECT id, user_id, title, description, mission_type, latitude, longitude, start_time, end_time, threat_level, success, created_at, updated_at FROM missions
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetMissionByID(ctx context.Context, id uuid.UUID) (Mission, error) {
	row := q.db.QueryRowContext(ctx, getMissionByID, id)
	var i Mission
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Description,
		&i.MissionType,
		&i.Latitude,
		&i.Longitude,
		&i.StartTime,
		&i.EndTime,
		&i.ThreatLevel,
		&i.Success,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getMissionsByUser = `-- name: GetMissionsByUser :many
SELECT id, user_id, title, description, mission_type, latitude, longitude, start_time, end_time, threat_level, success, created_at, updated_at FROM missions
WHERE user_id = $1
ORDER BY start_time DESC
`

func (q *Queries) GetMissionsByUser(ctx context.Context, userID uuid.UUID) ([]Mission, error) {
	rows, err := q.db.QueryContext(ctx, getMissionsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Mission
	for rows.Next() {
		var i Mission
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Description,
			&i.MissionType,
			&i.Latitude,
			&i.Longitude,
			&i.StartTime,
			&i.EndTime,
			&i.ThreatLevel,
			&i.Success,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMission = `-- name: UpdateMission :one
UPDATE missions
SET title = $2, description = $3, mission_type = $4,
    latitude = $5, longitude = $6,
    start_time = $7, end_time = $8,
    threat_level = $9, success = $10,
    updated_at = NOW()
WHERE id = $1
RETURNING id, user_id, title, description, mission_type, latitude, longitude, start_time, end_time, threat_level, success, created_at, updated_at
`

type UpdateMissionParams struct {
	ID          uuid.UUID
	Title       string
	Description sql.NullString
	MissionType NullMissionTypeEnum
	Latitude    sql.NullFloat64
	Longitude   sql.NullFloat64
	StartTime   time.Time
	EndTime     sql.NullTime
	ThreatLevel NullThreatLevelEnum
	Success     sql.NullBool
}

func (q *Queries) UpdateMission(ctx context.Context, arg UpdateMissionParams) (Mission, error) {
	row := q.db.QueryRowContext(ctx, updateMission,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.MissionType,
		arg.Latitude,
		arg.Longitude,
		arg.StartTime,
		arg.EndTime,
		arg.ThreatLevel,
		arg.Success,
	)
	var i Mission
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Description,
		&i.MissionType,
		&i.Latitude,
		&i.Longitude,
		&i.StartTime,
		&i.EndTime,
		&i.ThreatLevel,
		&i.Success,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
