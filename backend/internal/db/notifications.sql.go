// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: notifications.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const checkNotificationOwner = `-- name: CheckNotificationOwner :one
SELECT user_id FROM notifications WHERE id = $1
`

func (q *Queries) CheckNotificationOwner(ctx context.Context, id uuid.UUID) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, checkNotificationOwner, id)
	var user_id uuid.UUID
	err := row.Scan(&user_id)
	return user_id, err
}

const createNotification = `-- name: CreateNotification :one
INSERT INTO notifications (user_id, mission_id, type, message, is_read)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, user_id, mission_id, type, message, is_read, created_at
`

type CreateNotificationParams struct {
	UserID    uuid.UUID
	MissionID uuid.NullUUID
	Type      NotificationTypeEnum
	Message   string
	IsRead    bool
}

func (q *Queries) CreateNotification(ctx context.Context, arg CreateNotificationParams) (Notification, error) {
	row := q.db.QueryRowContext(ctx, createNotification,
		arg.UserID,
		arg.MissionID,
		arg.Type,
		arg.Message,
		arg.IsRead,
	)
	var i Notification
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.MissionID,
		&i.Type,
		&i.Message,
		&i.IsRead,
		&i.CreatedAt,
	)
	return i, err
}

const deleteNotification = `-- name: DeleteNotification :exec
DELETE FROM notifications
WHERE id = $1
`

func (q *Queries) DeleteNotification(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteNotification, id)
	return err
}

const getNotificationByID = `-- name: GetNotificationByID :one
SELECT id, user_id, mission_id, type, message, is_read, created_at FROM notifications
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetNotificationByID(ctx context.Context, id uuid.UUID) (Notification, error) {
	row := q.db.QueryRowContext(ctx, getNotificationByID, id)
	var i Notification
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.MissionID,
		&i.Type,
		&i.Message,
		&i.IsRead,
		&i.CreatedAt,
	)
	return i, err
}

const getNotificationsByUser = `-- name: GetNotificationsByUser :many
SELECT id, user_id, mission_id, type, message, is_read, created_at FROM notifications
WHERE user_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetNotificationsByUser(ctx context.Context, userID uuid.UUID) ([]Notification, error) {
	rows, err := q.db.QueryContext(ctx, getNotificationsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Notification
	for rows.Next() {
		var i Notification
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.MissionID,
			&i.Type,
			&i.Message,
			&i.IsRead,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markNotificationRead = `-- name: MarkNotificationRead :one
UPDATE notifications
SET is_read = TRUE
WHERE id = $1
RETURNING id, user_id, mission_id, type, message, is_read, created_at
`

func (q *Queries) MarkNotificationRead(ctx context.Context, id uuid.UUID) (Notification, error) {
	row := q.db.QueryRowContext(ctx, markNotificationRead, id)
	var i Notification
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.MissionID,
		&i.Type,
		&i.Message,
		&i.IsRead,
		&i.CreatedAt,
	)
	return i, err
}
