// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: spells.sql

package db

import (
	"context"
	"database/sql"

	"github.com/lib/pq"
	"github.com/sqlc-dev/pqtype"
)

const getSpells = `-- name: GetSpells :many
SELECT 
    pageid,
    title,
    url,
    summary,
    categories,
    realities,
    origin,
    power_class,
    access_level,
    aliases,
    infobox,
    embedding
FROM public.spells
LIMIT 12
`

type GetSpellsRow struct {
	Pageid      int32
	Title       string
	Url         string
	Summary     sql.NullString
	Categories  []string
	Realities   []string
	Origin      sql.NullString
	PowerClass  sql.NullString
	AccessLevel sql.NullInt16
	Aliases     []string
	Infobox     pqtype.NullRawMessage
	Embedding   interface{}
}

func (q *Queries) GetSpells(ctx context.Context) ([]GetSpellsRow, error) {
	rows, err := q.db.QueryContext(ctx, getSpells)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSpellsRow
	for rows.Next() {
		var i GetSpellsRow
		if err := rows.Scan(
			&i.Pageid,
			&i.Title,
			&i.Url,
			&i.Summary,
			pq.Array(&i.Categories),
			pq.Array(&i.Realities),
			&i.Origin,
			&i.PowerClass,
			&i.AccessLevel,
			pq.Array(&i.Aliases),
			&i.Infobox,
			&i.Embedding,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchSpells = `-- name: SearchSpells :many
SELECT title, summary, url, categories
FROM spells
ORDER BY embedding <-> $1
LIMIT $2
`

type SearchSpellsParams struct {
	Embedding interface{}
	Limit     int32
}

type SearchSpellsRow struct {
	Title      string
	Summary    sql.NullString
	Url        string
	Categories []string
}

func (q *Queries) SearchSpells(ctx context.Context, arg SearchSpellsParams) ([]SearchSpellsRow, error) {
	rows, err := q.db.QueryContext(ctx, searchSpells, arg.Embedding, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SearchSpellsRow
	for rows.Next() {
		var i SearchSpellsRow
		if err := rows.Scan(
			&i.Title,
			&i.Summary,
			&i.Url,
			pq.Array(&i.Categories),
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
