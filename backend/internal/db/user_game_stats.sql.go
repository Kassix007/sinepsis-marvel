// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user_game_stats.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const getUserGameStats = `-- name: GetUserGameStats :one
SELECT id, user_id, best_time, best_points, created_at, updated_at
FROM user_game_stats
WHERE user_id = $1
`

type GetUserGameStatsRow struct {
	ID         uuid.UUID
	UserID     uuid.NullUUID
	BestTime   string
	BestPoints string
	CreatedAt  time.Time
	UpdatedAt  time.Time
}

func (q *Queries) GetUserGameStats(ctx context.Context, userID uuid.NullUUID) (GetUserGameStatsRow, error) {
	row := q.db.QueryRowContext(ctx, getUserGameStats, userID)
	var i GetUserGameStatsRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.BestTime,
		&i.BestPoints,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const upsertUserGameStats = `-- name: UpsertUserGameStats :exec
INSERT INTO user_game_stats (user_id, best_time, best_points, created_at, updated_at)
VALUES ($1, $2, $3, NOW(), NOW())
ON CONFLICT (user_id)
DO UPDATE SET
    best_time = EXCLUDED.best_time,
    best_points = EXCLUDED.best_points,
    updated_at = NOW()
`

type UpsertUserGameStatsParams struct {
	UserID     uuid.NullUUID
	BestTime   string
	BestPoints string
}

func (q *Queries) UpsertUserGameStats(ctx context.Context, arg UpsertUserGameStatsParams) error {
	_, err := q.db.ExecContext(ctx, upsertUserGameStats, arg.UserID, arg.BestTime, arg.BestPoints)
	return err
}
