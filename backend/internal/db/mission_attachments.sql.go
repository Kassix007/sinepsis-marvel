// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: mission_attachments.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createMissionAttachment = `-- name: CreateMissionAttachment :one
INSERT INTO mission_attachments (mission_id, file_url, file_type)
VALUES ($1, $2, $3)
RETURNING id, mission_id, file_url, file_type, created_at
`

type CreateMissionAttachmentParams struct {
	MissionID uuid.UUID
	FileUrl   string
	FileType  sql.NullString
}

func (q *Queries) CreateMissionAttachment(ctx context.Context, arg CreateMissionAttachmentParams) (MissionAttachment, error) {
	row := q.db.QueryRowContext(ctx, createMissionAttachment, arg.MissionID, arg.FileUrl, arg.FileType)
	var i MissionAttachment
	err := row.Scan(
		&i.ID,
		&i.MissionID,
		&i.FileUrl,
		&i.FileType,
		&i.CreatedAt,
	)
	return i, err
}

const deleteMissionAttachment = `-- name: DeleteMissionAttachment :exec
DELETE FROM mission_attachments
WHERE id = $1
`

func (q *Queries) DeleteMissionAttachment(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteMissionAttachment, id)
	return err
}

const getAttachmentsByMission = `-- name: GetAttachmentsByMission :many
SELECT id, mission_id, file_url, file_type, created_at FROM mission_attachments
WHERE mission_id = $1
`

func (q *Queries) GetAttachmentsByMission(ctx context.Context, missionID uuid.UUID) ([]MissionAttachment, error) {
	rows, err := q.db.QueryContext(ctx, getAttachmentsByMission, missionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MissionAttachment
	for rows.Next() {
		var i MissionAttachment
		if err := rows.Scan(
			&i.ID,
			&i.MissionID,
			&i.FileUrl,
			&i.FileType,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMissionAttachmentByID = `-- name: GetMissionAttachmentByID :one
SELECT id, mission_id, file_url, file_type, created_at FROM mission_attachments
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetMissionAttachmentByID(ctx context.Context, id uuid.UUID) (MissionAttachment, error) {
	row := q.db.QueryRowContext(ctx, getMissionAttachmentByID, id)
	var i MissionAttachment
	err := row.Scan(
		&i.ID,
		&i.MissionID,
		&i.FileUrl,
		&i.FileType,
		&i.CreatedAt,
	)
	return i, err
}
