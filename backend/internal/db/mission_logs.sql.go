// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: mission_logs.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createMissionLog = `-- name: CreateMissionLog :one
INSERT INTO mission_logs (mission_id, log_date, note)
VALUES ($1, $2, $3)
RETURNING id, mission_id, log_date, note, created_at
`

type CreateMissionLogParams struct {
	MissionID uuid.UUID
	LogDate   time.Time
	Note      string
}

func (q *Queries) CreateMissionLog(ctx context.Context, arg CreateMissionLogParams) (MissionLog, error) {
	row := q.db.QueryRowContext(ctx, createMissionLog, arg.MissionID, arg.LogDate, arg.Note)
	var i MissionLog
	err := row.Scan(
		&i.ID,
		&i.MissionID,
		&i.LogDate,
		&i.Note,
		&i.CreatedAt,
	)
	return i, err
}

const deleteMissionLog = `-- name: DeleteMissionLog :exec
DELETE FROM mission_logs
WHERE id = $1
`

func (q *Queries) DeleteMissionLog(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteMissionLog, id)
	return err
}

const getLogsByMission = `-- name: GetLogsByMission :many
SELECT id, mission_id, log_date, note, created_at FROM mission_logs
WHERE mission_id = $1
ORDER BY log_date ASC
`

func (q *Queries) GetLogsByMission(ctx context.Context, missionID uuid.UUID) ([]MissionLog, error) {
	rows, err := q.db.QueryContext(ctx, getLogsByMission, missionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MissionLog
	for rows.Next() {
		var i MissionLog
		if err := rows.Scan(
			&i.ID,
			&i.MissionID,
			&i.LogDate,
			&i.Note,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMissionLogByID = `-- name: GetMissionLogByID :one
SELECT id, mission_id, log_date, note, created_at FROM mission_logs
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetMissionLogByID(ctx context.Context, id uuid.UUID) (MissionLog, error) {
	row := q.db.QueryRowContext(ctx, getMissionLogByID, id)
	var i MissionLog
	err := row.Scan(
		&i.ID,
		&i.MissionID,
		&i.LogDate,
		&i.Note,
		&i.CreatedAt,
	)
	return i, err
}
